pipeline {
  agent {
    docker {
      image 'iamvenkatgiri/online-shop:mvn_doc_jen'
      args "--user root -v /var/run/docker.sock:/var/run/docker.sock"
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        sh 'mvn -v && git --version && docker --version && sed --version'
        // git branch: 'master', url: 'https://github.com/iamvenkatgiri/VenShop.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      steps {
        withSonarQubeEnv('sonar') {
          sh 'mvn clean verify sonar:sonar -Dsonar.projectKey=VenShop'
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 3, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "iamvenkatgiri/online-shop:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            // Tag the image as latest in addition to build number
            sh 'docker tag ${DOCKER_IMAGE} iamvenkatgiri/online-shop:latest'

            def dockerImage = docker.image("${DOCKER_IMAGE}")
            def latestImage = docker.image('iamvenkatgiri/online-shop:latest')
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                dockerImage.push()
                latestImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = 'VenShop'
            GIT_USER_NAME = 'iamvenkatgiri'
        }
        steps {
            // checkout scm
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
                    cd ${WORKSPACE}
                    whoami
                    ls -ltr
                    git config user.email "venkatagiri.sasanapuri@gmail.com"
                    git config user.name "iamvenkatgiri"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" k8s-manifests/deployment.yml
                    git add k8s-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
